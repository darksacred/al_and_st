import sys
from random import randint

# OS Win10 x64, Python 3.8.6

# Тут просто тест
# a = "Hello world"
# b = a
# c = [1, 2, 3, 4, 5, 6, 7, 8]
# st = {1, 2, 3, 4, 5, 6}
# st1 = {"Один": 1, "Два": 2, "Три": 3}
#
# print(sys.getsizeof(a))
# print(sys.getsizeof(b))
# print(sys.getsizeof(c))
# print(c.__sizeof__())
# print(sys.getsizeof(st))
# print(st.__sizeof__())
# print(sys.getsizeof(st1))
# print(st1.__sizeof__())

# 2.2. Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560,
# то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

even = []
not_even = []
j = 0
k = 0
ls = list(map(int, input(f'Введите число: ')))
for i in ls:
    if i % 2 == 0:
        even.append(i)
        j += 1
    else:
        not_even.append(i)
        k += 1
print(f'Число имеет {j} чётных числа ({even}) и {k} не чётных числа({not_even})')
print(f'Счётчик чётных: ', j.__sizeof__())
print(f'Счётчик не чётных: ', k.__sizeof__())
print(f'Полученное число в список: ', ls.__sizeof__())
print(f'Список even: ', even.__sizeof__())
print(f'Список not_even: ', not_even.__sizeof__())
print(f'Всего программа занимает: ', int(j.__sizeof__()) + int(k.__sizeof__()) + int(ls.__sizeof__()) +
      int(even.__sizeof__()) + int(not_even.__sizeof__()))

# Счётчик чётных:  28
# Счётчик не чётных:  28
# Полученное число в список:  104
# Список even:  72
# Список not_even:  72
# Всего программа занимает: 304

j = 0
k = 0
ls = list(map(int, input(f'Введите число: ')))
for i in ls:
    if i % 2 == 0:
        j += 1
    else:
        k += 1
print(f'Число имеет {j} чётных числа и {k} не чётных числа')
print(f'Счётчик чётных: ', j.__sizeof__())
print(f'Счётчик не чётных: ', k.__sizeof__())
print(f'Полученное число в списке: ', ls.__sizeof__())
print(f'Всего программа занимает: ', int(j.__sizeof__()) + int(k.__sizeof__()) + int(ls.__sizeof__()))

# Счётчик чётных:  28
# Счётчик не чётных:  28
# Полученное число в списке:  104
# Всего программа занимает:  160

# При удалении ненужных списков, программа уменьшилась почти в два раза по объёму.

# 8. Матрица 5x4 заполняется вводом с клавиатуры кроме последних элементов строк.
# Программа должна вычислять сумму введенных элементов каждой строки и записывать ее в последнюю ячейку строки.
# В конце следует вывести полученную матрицу.

m, n = 5, 4
m1 = []
for stroka in range(m):
    num = list(map(int, input(f'Ведите {stroka + 1} строку чисел: ').split()))
    m1.append(num)
for i in m1:
    s = 0
    for j in i:
        s += j
    m1[m1.index(i)].append(s)
print('\n'.join(str(i) for i in m1))
print(f'Размер массива в памяти: ', m1.__sizeof__())
print(f'Размер массива в байтах: ', sys.getsizeof(m1))

# Ведите 1 строку чисел: 1 2 3
# Ведите 2 строку чисел: 2 3 4
# Ведите 3 строку чисел: 3 4 5
# Ведите 4 строку чисел: 4 5 6
# Ведите 5 строку чисел: 5 6 7
# [1, 2, 3, 6]
# [2, 3, 4, 9]
# [3, 4, 5, 12]
# [4, 5, 6, 15]
# [5, 6, 7, 18]
# Размер массива в памяти:  104
# Размер массива в байтах:  120

# Ведите 1 строку чисел: 456789 45612 679845
# Ведите 2 строку чисел: 12345 8743 33333
# Ведите 3 строку чисел: 222222 11111 222222
# Ведите 4 строку чисел: 7894135487 54687945 11111111
# Ведите 5 строку чисел: 4 4 4
# [456789, 45612, 679845, 1182246]
# [12345, 8743, 33333, 54421]
# [222222, 11111, 222222, 455555]
# [7894135487, 54687945, 11111111, 7959934543]
# [4, 4, 4, 12]
# Размер массива в памяти:  104
# Размер массива в байтах:  120
#
# Как оказалось не важно какие числа вставлять, размер не меняется в памяти, как и объём выделяемый для массива.
# Ситуация меняется если убавлять или прибовлять m и n.

# 9. Найти максимальный элемент среди минимальных элементов столбцов матрицы.
m, n = 3, 3
m1 = []
m2, m3 = [], []
for stroka in range(m):
    num = [randint(1, 9) for i in range(m)]
    m1.append(num) # Для наглядности
print('\n'.join(str(i) for i in m1))
for i in range(len(m1)):
    for j in range(len(m1)):
        m2.append(m1[j][i])
    m3.append(min(m2))
    m2 = []
print(f'Максимальный элемент из минимальных {max(m3)} в столбце: ')
n = m3.index(max(m3))
for i in range(len(m1)):
    print('\n'.join(str(m1[i][n])))

print(f'Всего программа занимает на переменные: ', int(m.__sizeof__()) + int(n.__sizeof__()) + int(m1.__sizeof__()) +
      int(m2.__sizeof__()) + int(m3.__sizeof__()) + int(num.__sizeof__()))
print(f'Всего программе выделенно на переменные: ', int(sys.getsizeof(m)) + int(sys.getsizeof(n)) +
      int(sys.getsizeof(m1)) + int(sys.getsizeof(m2)) + int(sys.getsizeof(m3)) + int(sys.getsizeof(num)))
# Всего программа занимает в памяти на переменные:  312
# Всего программе выделенно на переменные:  376